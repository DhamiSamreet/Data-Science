# -*- coding: utf-8 -*-
"""Copy of Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JWw_G3WkLEYAFGqSXamfNgurBkfc_TVO
"""

#--------------------------Task1-------------------------------------------------------------------------- 

import sklearn
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

from sklearn.datasets import load_boston
X,y=load_boston(return_X_y=True)

#print(X.shape)

house_price = load_boston()

df=pd.DataFrame(house_price.data,columns=house_price.feature_names)
df['PRICE']=house_price.target

from sklearn.model_selection import train_test_split
from sklearn import linear_model

import array
coefficients=array.array('f')
regr = linear_model.LinearRegression()
train_x=np.asanyarray(df[['CRIM']])
train_y=np.asanyarray(df[['PRICE']])
#train_x
regr.fit(train_x, train_y)
coefficients.append(regr.coef_)

regr = linear_model.LinearRegression()
train_x=np.asanyarray(df[['ZN']])
train_y=np.asanyarray(df[['PRICE']])
regr.fit(train_x, train_y)
coefficients.append(regr.coef_)

regr = linear_model.LinearRegression()
train_x=np.asanyarray(df[['INDUS']])
train_y=np.asanyarray(df[['PRICE']])
regr.fit(train_x, train_y)
coefficients.append(regr.coef_)

regr = linear_model.LinearRegression()
train_x=np.asanyarray(df[['CHAS']])
train_y=np.asanyarray(df[['PRICE']])
regr.fit(train_x, train_y)
coefficients.append(regr.coef_)

regr = linear_model.LinearRegression()
train_x=np.asanyarray(df[['NOX']])
train_y=np.asanyarray(df[['PRICE']])
regr.fit(train_x, train_y)
coefficients.append(regr.coef_)

regr = linear_model.LinearRegression()
train_x=np.asanyarray(df[['RM']])
train_y=np.asanyarray(df[['PRICE']])
regr.fit(train_x, train_y)
coefficients.append(regr.coef_)

regr = linear_model.LinearRegression()
train_x=np.asanyarray(df[['AGE']])
train_y=np.asanyarray(df[['PRICE']])
regr.fit(train_x, train_y)
coefficients.append(regr.coef_)

regr = linear_model.LinearRegression()
train_x=np.asanyarray(df[['DIS']])
train_y=np.asanyarray(df[['PRICE']])
regr.fit(train_x, train_y)
coefficients.append(regr.coef_)

regr = linear_model.LinearRegression()
train_x=np.asanyarray(df[['RAD']])
train_y=np.asanyarray(df[['PRICE']])
regr.fit(train_x, train_y)
coefficients.append(regr.coef_)

regr = linear_model.LinearRegression()
train_x=np.asanyarray(df[['TAX']])
train_y=np.asanyarray(df[['PRICE']])
regr.fit(train_x, train_y)
coefficients.append(regr.coef_)

regr = linear_model.LinearRegression()
train_x=np.asanyarray(df[['PTRATIO']])
train_y=np.asanyarray(df[['PRICE']])
regr.fit(train_x, train_y)
coefficients.append(regr.coef_)

regr = linear_model.LinearRegression()
train_x=np.asanyarray(df[['B']])
train_y=np.asanyarray(df[['PRICE']])
regr.fit(train_x, train_y)
coefficients.append(regr.coef_)

regr = linear_model.LinearRegression()
train_x=np.asanyarray(df[['LSTAT']])
train_y=np.asanyarray(df[['PRICE']])
regr.fit(train_x, train_y)
coefficients.append(regr.coef_)

#print(coefficients)


#bar graph
bars = ('CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX','RM','AGE','DIS','RAD','TAX','PTRATIO','B','LSTAT')
y_pos = np.arange(len(bars))
plt.bar(y_pos, coefficients)
plt.xticks(y_pos, bars)
plt.show()

#---------------------------------------------------Task2---------------------------------------------------------

from sklearn import preprocessing
from sklearn.linear_model import Ridge
house_price.data = preprocessing.scale(house_price.data)
X_train, X_test, y_train, y_test = train_test_split(house_price.data, house_price.target, test_size=0.3, random_state=10)



# initialize
ridge = Ridge(alpha=0)
ridge.fit(X_train, y_train)
ridge_df = pd.DataFrame({'variable': house_price.feature_names, 'estimate': ridge_reg.coef_})

# iterate lambdas
for lamb in np.arange(0, 200, 1):
    ridge = Ridge(alpha=lamb)
    ridge.fit(X_train, y_train)
    var_name = 'estimate' + str(lamb)
    ridge_df[var_name] = ridge.coef_

#print(var_name)
# organize dataframe
ridge_df = ridge_df.set_index('variable').T.rename_axis('estimate').rename_axis(1).reset_index()

# plot betas by lambda
fig, graph = plt.subplots()
graph.plot(ridge_df.RM, 'r', ridge_df.ZN, 'g', ridge_df.RAD, 'b', ridge_df.CRIM, 'c', ridge_df.TAX, 'y')
graph.axhline(y=0,color='black')
graph.set_xlabel("Lambda")
graph.set_ylabel("Beta Estimate")
graph.set_title("Ridge Regression Trace", fontsize=20)
graph.legend(labels=['Room','Residential Zone','Highway Access','Crime Rate','Tax'])

#---------------------------------------------------Task3-------------------------------------------------------

from sklearn.linear_model import Lasso

lasso = Lasso(alpha=0)
lasso.fit(X_train, y_train)
lasso_df = pd.DataFrame({'variable': house_price.feature_names, 'estimate': ridge_reg.coef_})
for lamb in np.arange(0, 200, 1):
    lasso = Lasso(alpha=lamb)
    lasso.fit(X_train, y_train)
    var_name = 'estimate' + str(lamb)
    lasso_df[var_name] = lasso.coef_

# organize dataframe
lasso_df = lasso_df.set_index('variable').T.rename_axis('estimate').rename_axis(1).reset_index()

#plotting
fig1,graph = plt.subplots()
graph.plot(lasso_df.RM, 'r', lasso_df.ZN, 'g', lasso_df.RAD, 'b', lasso_df.CRIM, 'c', lasso_df.TAX, 'y')
graph.axhline(y=0,color='black')
graph.set_xlabel("Lambda")
graph.set_ylabel("Beta Estimate")
graph.set_title("Lasso Regression Trace", fontsize=20)
graph.legend(labels=['Room','Residential Zone','Highway Access','Crime Rate','Tax'])

#--------------------------------------------------------Task4------------------------------------------------------------

from sklearn.metrics import mean_squared_error
train_errors=[]
test_errors=[]
x_axis=np.array(range(len(y_test)))
model1 = Ridge(alpha=60)
model1.fit(X_train,y_train)
#print(pred.shape)
#print(X_test[:,1])
pred1 = model1.predict(X_test)
pred2 = model1.predict(X_train)
test_errors.append(mean_squared_error(y_test,pred1))
train_errors.append(mean_squared_error(y_train,pred2))
residual1=y_test-pred1
plt.scatter(x_axis,residual1)
plt.ylabel("Ridge Residuals(lambda=60)")
plt.show()

model2 = Ridge(alpha=10)
model2.fit(X_train,y_train)
#print(pred.shape)
#print(X_test[:,1])
pred1 = model2.predict(X_test)
pred2 = model2.predict(X_train)
test_errors.append(mean_squared_error(y_test,pred1))
train_errors.append(mean_squared_error(y_train,pred2))
residual2=y_test-pred1
plt.scatter(x_axis,residual2)
plt.ylabel("Ridge Residuals(lambda=10)")
plt.show()

model3 = Ridge(alpha=100)
model3.fit(X_train,y_train)
#print(pred.shape)
#print(X_test[:,1])
pred1 = model3.predict(X_test)
pred2 = model3.predict(X_train)
test_errors.append(mean_squared_error(y_test,pred1))
train_errors.append(mean_squared_error(y_train,pred2))

residual3=y_test-pred1
plt.scatter(x_axis,residual3)
plt.ylabel("Ridge Residuals(lambda=100)")
plt.show()

#print(train_errors)


model4 = Lasso(alpha=1)
model4.fit(X_train,y_train)
#print(pred.shape)
#print(X_test[:,1])
pred1 = model4.predict(X_test)
pred2 = model4.predict(X_train)
test_errors.append(mean_squared_error(y_test,pred1))
train_errors.append(mean_squared_error(y_train,pred2))

residual4=y_test-pred1
plt.scatter(x_axis,residual4)
plt.ylabel("Lasso Residuals(lambda=1)")
plt.show()


model5 = Lasso(alpha=2)
model5.fit(X_train,y_train)
#print(pred.shape)
#print(X_test[:,1])
pred1 = model5.predict(X_test)
pred2 = model5.predict(X_train)
test_errors.append(mean_squared_error(y_test,pred1))
train_errors.append(mean_squared_error(y_train,pred2))

residual5=y_test-pred1
plt.scatter(x_axis,residual5)
plt.ylabel("Lasso Residuals(lambda=2)")
plt.show()


model6 = Lasso(alpha=100)
model6.fit(X_train,y_train)
#print(pred.shape)
#print(X_test[:,1])
pred1 = model6.predict(X_test)
pred2 = model6.predict(X_train)
test_errors.append(mean_squared_error(y_test,pred1))
train_errors.append(mean_squared_error(y_train,pred2))

residual6=y_test-pred1
plt.scatter(x_axis,residual6)
plt.ylabel("Lasso Residuals(lambda=100)")
plt.show()

model7=LinearRegression()
model7.fit(X_train,y_train)
pred1=model7.predict(X_test)
pred2=model7.predict(X_train)
test_errors.append(mean_squared_error(y_test,pred1))
train_errors.append(mean_squared_error(y_train,pred2))

residual7=y_test-pred1
plt.scatter(x_axis,residual7)
plt.ylabel("Simple OLS(Residuals)")
plt.show()

#---------------------------------------------------------Task5------------------------------------------------------------------

rom sklearn.linear_model import LinearRegression
reg=LinearRegression()
reg.fit(X_train,y_train)
reg.coef_

test_pred=reg.predict(X_test)
error=y_test-test_pred
training_error=(sum(abs(error)))/len(y_test)
training_error
train_pred=reg.predict(X_train)
test_pred=reg.predict(X_test)

train_errors.append(mean_squared_error(y_train,train_pred))
test_errors.append(mean_squared_error(y_test,test_pred))

table=pd.DataFrame({'Type of regression':['Ridge(alpha=60)','Ridge(alpha=10)','Ridge(alpha=100)','Lasso(alpha=1)','Lasso(alpha=2)','Lasso(alpha=60)','OLS'],'Training errors':train_errors,'Testing errors':test_errors})

table.head(7)

